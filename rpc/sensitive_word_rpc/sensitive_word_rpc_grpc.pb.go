// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sensitive_word_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensitiveWordClient is the client API for SensitiveWord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensitiveWordClient interface {
	AddSensitiveWord(ctx context.Context, in *OperateSensitiveWordRequest, opts ...grpc.CallOption) (*OperateSensitiveWordResponse, error)
	RemoveSensitiveWord(ctx context.Context, in *OperateSensitiveWordRequest, opts ...grpc.CallOption) (*OperateSensitiveWordResponse, error)
	CheckSensitiveWord(ctx context.Context, in *CheckSensitiveWordRequest, opts ...grpc.CallOption) (*CheckSensitiveWordResponse, error)
}

type sensitiveWordClient struct {
	cc grpc.ClientConnInterface
}

func NewSensitiveWordClient(cc grpc.ClientConnInterface) SensitiveWordClient {
	return &sensitiveWordClient{cc}
}

func (c *sensitiveWordClient) AddSensitiveWord(ctx context.Context, in *OperateSensitiveWordRequest, opts ...grpc.CallOption) (*OperateSensitiveWordResponse, error) {
	out := new(OperateSensitiveWordResponse)
	err := c.cc.Invoke(ctx, "/sensitive_word_rpc.SensitiveWord/AddSensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) RemoveSensitiveWord(ctx context.Context, in *OperateSensitiveWordRequest, opts ...grpc.CallOption) (*OperateSensitiveWordResponse, error) {
	out := new(OperateSensitiveWordResponse)
	err := c.cc.Invoke(ctx, "/sensitive_word_rpc.SensitiveWord/RemoveSensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) CheckSensitiveWord(ctx context.Context, in *CheckSensitiveWordRequest, opts ...grpc.CallOption) (*CheckSensitiveWordResponse, error) {
	out := new(CheckSensitiveWordResponse)
	err := c.cc.Invoke(ctx, "/sensitive_word_rpc.SensitiveWord/CheckSensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensitiveWordServer is the server API for SensitiveWord service.
// All implementations must embed UnimplementedSensitiveWordServer
// for forward compatibility
type SensitiveWordServer interface {
	AddSensitiveWord(context.Context, *OperateSensitiveWordRequest) (*OperateSensitiveWordResponse, error)
	RemoveSensitiveWord(context.Context, *OperateSensitiveWordRequest) (*OperateSensitiveWordResponse, error)
	CheckSensitiveWord(context.Context, *CheckSensitiveWordRequest) (*CheckSensitiveWordResponse, error)
	mustEmbedUnimplementedSensitiveWordServer()
}

// UnimplementedSensitiveWordServer must be embedded to have forward compatible implementations.
type UnimplementedSensitiveWordServer struct {
}

func (UnimplementedSensitiveWordServer) AddSensitiveWord(context.Context, *OperateSensitiveWordRequest) (*OperateSensitiveWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSensitiveWord not implemented")
}
func (UnimplementedSensitiveWordServer) RemoveSensitiveWord(context.Context, *OperateSensitiveWordRequest) (*OperateSensitiveWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSensitiveWord not implemented")
}
func (UnimplementedSensitiveWordServer) CheckSensitiveWord(context.Context, *CheckSensitiveWordRequest) (*CheckSensitiveWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSensitiveWord not implemented")
}
func (UnimplementedSensitiveWordServer) mustEmbedUnimplementedSensitiveWordServer() {}

// UnsafeSensitiveWordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensitiveWordServer will
// result in compilation errors.
type UnsafeSensitiveWordServer interface {
	mustEmbedUnimplementedSensitiveWordServer()
}

func RegisterSensitiveWordServer(s grpc.ServiceRegistrar, srv SensitiveWordServer) {
	s.RegisterService(&SensitiveWord_ServiceDesc, srv)
}

func _SensitiveWord_AddSensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateSensitiveWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).AddSensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensitive_word_rpc.SensitiveWord/AddSensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).AddSensitiveWord(ctx, req.(*OperateSensitiveWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_RemoveSensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateSensitiveWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).RemoveSensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensitive_word_rpc.SensitiveWord/RemoveSensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).RemoveSensitiveWord(ctx, req.(*OperateSensitiveWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_CheckSensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSensitiveWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).CheckSensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensitive_word_rpc.SensitiveWord/CheckSensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).CheckSensitiveWord(ctx, req.(*CheckSensitiveWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SensitiveWord_ServiceDesc is the grpc.ServiceDesc for SensitiveWord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensitiveWord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensitive_word_rpc.SensitiveWord",
	HandlerType: (*SensitiveWordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSensitiveWord",
			Handler:    _SensitiveWord_AddSensitiveWord_Handler,
		},
		{
			MethodName: "RemoveSensitiveWord",
			Handler:    _SensitiveWord_RemoveSensitiveWord_Handler,
		},
		{
			MethodName: "CheckSensitiveWord",
			Handler:    _SensitiveWord_CheckSensitiveWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sensitive_word_rpc/sensitive_word_rpc.proto",
}
